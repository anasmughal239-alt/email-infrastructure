version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: emailinfra-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: emailinfra
      POSTGRES_USER: emailinfra_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - emailinfra-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U emailinfra_user -d emailinfra"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: emailinfra-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_change_in_production}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - emailinfra-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: emailinfra-app
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://emailinfra_user:${POSTGRES_PASSWORD:-secure_password_change_in_production}@postgres:5432/emailinfra
      
      # NextAuth.js
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-super-secret-key-here-change-in-production}
      
      # OAuth Providers (optional)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      
      # Email Service
      RESEND_API_KEY: ${RESEND_API_KEY:-}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@yourdomain.com}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_change_in_production}@redis:6379
      
      # Security
      NODE_ENV: production
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
      TRUSTED_HOSTS: ${TRUSTED_HOSTS:-localhost}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - emailinfra-network
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Database Migration Service (runs once)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: emailinfra-migrate
    environment:
      DATABASE_URL: postgresql://emailinfra_user:${POSTGRES_PASSWORD:-secure_password_change_in_production}@postgres:5432/emailinfra
    command: ["npx", "prisma", "migrate", "deploy"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - emailinfra-network
    restart: "no"

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: emailinfra-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - emailinfra-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  emailinfra-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16